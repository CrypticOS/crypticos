; CrypticCode to C
; Linux I/O Call Support
; Self hosted compiler, up to 27 labels

; Initialization
out "int t[100]={0};int b[1000]={0};int y=0;int n=0;" ; Initialization
out "int d;" ; Temp int
out "int main (int argc,char *argv[]) {"

var c 0 ; Holds current char
var label 'A' ; Holds the label character

top:
	mov c getchar
	cmp c '0' end ; end of line
	cmp c '.' dot
	cmp c ',' comma
	cmp c '>' bracketRight
	cmp c '<' bracketLeft
	cmp c 'd' de
	cmp c 'a' ay
	cmp c '+' plus
	cmp c '-' minus
	cmp c '%' percent
	cmp c '*' asterisk
	cmp c '!' reset
	cmp c '^' up
	cmp c 'v' down
	cmp c '$' goto
	cmp c '?' compare

	cmp c '|' label
jmp top

; Very basic instructions,
; Self-explainatory.

dot:
	out "putchar(b[n]);"
jmp top

comma:

jmp top

bracketRight:
	out "n++;"
jmp top

bracketLeft:
	out "n--;"
jmp top

de:
	out "y++;"
jmp top

ay:
	out "y--;"
jmp top

plus:
	out "b[n]++;"
jmp top

minus:
	out "b[n]--;"
jmp top

percent:
	out "b[n]+=50;"
jmp top

asterisk:
	out "b[n]+=5;"
jmp top

reset:
	out "b[n]=0;"
jmp top

up:
	out "t[y]=b[n];"
jmp top

down:
	out "b[n]=t[y];"
jmp top

; More complicated instructions
; compiled here

label:
	out "L" ; label c
	out label
	out ":"
	add label 1
jmp top

goto:
	out "goto g;"
jmp top

compare:
	out "if (t[y+1]==t[y+2]){goto g;}"
jmp top

end:

out "return 0;"

; Map Labels though A-Z alphabet

out "g:"
out "d=t[y]+'@';"

label_top:
	cmp label 'A' label_end
	sub label 1

	; Print:
	; CMP EAX, 'A'
	; JE LA
	out "if (d=='"
	out label
	out "'"
	out "){goto "
	out label
	out ";}"

	jmp label_top
label_end:

out "}"
