; Main CrypticASM compiler

; Load code from:
arr code 5
mov code[0] '3'
mov code[1] '3'
mov code[2] '0'
mov code[3] ' '
mov code[4] 0


var tokenStart 0
var tokenValue 0
var currentChar 0

; Include Kernel functions
include "std.casm"



mov currentChar [code]
call getToken
out tokenValue

; Main ends, jump to end.
jmp end

; Read a token and store type/value
; Parses int/char into real int
getToken:
	call getToken_next
	cmp std_result 0 getToken_done ; compare with null

	mov tokenStart currentChar ; set token start (for strings)

	; Check for alpha char (only 1 char)
	mov std_third std_result
	call isAlpha
	cmp std_result 1 getToken_alpha
	call isDigit
	cmp std_result 1 getToken_digit
jmp getToken

getToken_done:
ret

getToken_next:
	mov std_first 1 ; GET
	mov std_second currentChar
	call std_get
	sub currentChar 1 ; increment char
	mov std_third std_result
ret

; Tokenize alpha chars
getToken_alpha:
	out std_third ; where the char was put
jmp getToken

; Parse and convert integers
getToken_digit:
	sub std_third '0'

	; tokenValue += std_third
	mov std_first tokenValue
	mov std_second std_third
	call std_add
	mov tokenValue std_result

	; Next char, check for next
	call getToken_next

	; Is next char digit? If not, Token done.
	call isDigit
	cmp std_result 0 getToken_done

	; Else
	; tokenValue *= 10
	mov std_first tokenValue
	mov std_second 10
	call std_mult
	mov tokenValue std_result
jmp getToken_digit


; Convert int (123 > %%****++)
putInt:
	; Below 50?
	mov std_first std_third
	mov std_second 50
	call std_higher
	cmp std_result 1 putInt_percent

	; Below 5?
	mov std_first std_third
	mov std_second 5
	call std_higher
	cmp std_result 1 putInt_asterisk

	; Below 1?
	mov std_first std_third
	mov std_second 1
	call std_higher
	cmp std_result 1 putInt_plus
	out std_third

	cmp std_third 0 putInt_quit
jmp putInt

putInt_percent:
	; mov std_first std_third
	; mov std_second 50
	; call std_sub

	sub std_third 50
	out '%'
jmp putInt

putInt_asterisk:
	sub std_third 5
	out '*'
jmp putInt

putInt_plus:
	sub std_third 1
	out '+'
jmp putInt

putInt_quit:
ret


; Input char = std_third
; Check (a >= '0' && a <= '9')
isDigit:
	; above '0'
	mov std_first std_third
	mov std_second '0'
	call std_higher
	cmp std_result 2 isDigit_no

	; Check below '9'
	mov std_first std_third
	mov std_second '9'
	add std_second 1
	call std_higher
	cmp std_result 1 isDigit_no

jmp isDigit_yes

isDigit_no:
	mov std_result 0
ret

isDigit_yes:
	mov std_result 1
ret

; std_third
; Check (a >= '0' && a <= '9')
isAlpha:
	; above 'A'
	mov std_first std_third
	mov std_second 'A'
	call std_higher
	cmp std_result 2 isDigit_no

	; Check below 'Z'
	mov std_first std_third
	mov std_second 'Z'
	add std_second 1
	call std_higher
	cmp std_result 1 isDigit_no

jmp isAlpha_yes

isAlpha_no:
	mov std_result 0
ret

isAlpha_yes:
	mov std_result 1
ret



end:
